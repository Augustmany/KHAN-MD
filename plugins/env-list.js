const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions2');
const { writeFileSync } = require('fs');
const path = require('path');

// Helper function to update config.env
function updateConfig(key, value) {
  const envPath = path.join(__dirname, '../config.env');
  let envContent = fs.existsSync(envPath) ? fs.readFileSync(envPath, 'utf-8') : '';
  
  envContent = envContent.split('\n')
    .filter(line => !line.startsWith(key + '='))
    .join('\n');
  
  envContent += `\n${key}=${value}`;
  writeFileSync(envPath, envContent.trim());
  return true;
}

cmd({
  pattern: "env",
  alias: ["setting","set"],
  desc: "Manage bot environment variables",
  category: "owner",
  filename: __filename,
  use: '<option>',
  react: "‚öôÔ∏è"
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isCreator, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
  if (!isCreator) return reply("‚ùå This command is only for bot owner!");

  const heading = [
    `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *${config.BOT_NAME}* „Äï‚îÅ‚îÅ‚îÅ‚îà‚ä∑`,
    `‚îÉ‚òÖ‚îÇ Owner : *${config.OWNER_NAME}*`,
    `‚îÉ‚òÖ‚îÇ Baileys : *Multi Device*`,
    `‚îÉ‚òÖ‚îÇ Type : *NodeJs*`,
    `‚îÉ‚òÖ‚îÇ Platform : *Heroku*`,
    `‚îÉ‚òÖ‚îÇ Mode : *[${config.MODE}]*`,
    `‚îÉ‚òÖ‚îÇ Prifix : *[${config.PREFIX}]*`,
    `‚îÉ‚òÖ‚îÇ Version : *3.0.0 B·¥á·¥õ·¥Ä*`,
    `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`,
    "",
    "üìå *Reply with number within 3 minutes*",
    ""
  ].join("\n");

  const options = [
    "1Ô∏è‚É£ *AUTO FUNCTIONS*",
    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "‚îÇ1. Auto Status Seen: " + (config.AUTO_STATUS_SEEN === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ2. Auto Status Reply: " + (config.AUTO_STATUS_REPLY === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ3. Auto Status React: " + (config.AUTO_STATUS_REACT === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ4. Auto Read Messages: " + (config.READ_MESSAGE === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ5. Auto React: " + (config.AUTO_REACT === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ6. Auto Reply: " + (config.AUTO_REPLY === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ7. Auto Typing: " + (config.AUTO_TYPING === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ8. Auto Recording: " + (config.AUTO_RECORDING === "true" ? "‚úÖ" : "‚ùå"),
    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "",
    "2Ô∏è‚É£ *SECURITY*",
    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "‚îÇ9. Anti Bad Words: " + (config.ANTI_BAD === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ10. Anti Links: " + (config.ANTI_LINK === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ11. Anti View Once: " + (config.ANTI_VV === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ12. Delete Links: " + (config.DELETE_LINKS === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ13. Anti Delete Path: " + config.ANTI_DEL_PATH,
    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "",
    "3Ô∏è‚É£ *MEDIA*",
    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "‚îÇ14. Auto Voice: " + (config.AUTO_VOICE === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ15. Auto Sticker: " + (config.AUTO_STICKER === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ16. Read Commands: " + (config.READ_CMD === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ17. Sticker Pack: " + config.STICKER_NAME,
    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "",
    "4Ô∏è‚É£ *OTHER SETTINGS*",
    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "‚îÇ18. Custom React: " + (config.CUSTOM_REACT === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ19. Mention Reply: " + (config.MENTION_REPLY === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ20. Always Online: " + (config.ALWAYS_ONLINE === "true" ? "‚úÖ" : "‚ùå"),
    "‚îÇ21. Public Mode: " + (config.PUBLIC_MODE === "true" ? "‚úÖ" : "‚ùå"),
    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "",
    "5Ô∏è‚É£ *EDIT VALUES*",
    "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "‚îÇ22. Edit Status Message",
    "‚îÇ23. Edit Alive Message",
    "‚îÇ24. Edit Custom Emojis",
    "‚îÇ25. Edit Menu Image URL",
    "‚îÇ26. Edit Alive Image URL",
    "‚îÇ27. Edit Sticker Pack",
    "‚îÇ28. Edit Anti Delete Path",
    "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
    "",
    config.DESCRIPTION
  ].join("\n");

  const externalAdReply = {
    title: `‚öôÔ∏è ${config.BOT_NAME} ENV CONTROL`,
    body: config.DESCRIPTION,
    thumbnailUrl: config.MENU_IMAGE_URL,
    mediaType: 1,
    mediaUrl: config.ALIVE_IMG,
    sourceUrl: '',
    showAdAttribution: true
  };

  const sentMsg = await conn.sendMessage(from, {
    text: heading + options,
    footer: `Dev: ${config.DEV} | ${config.STICKER_NAME}`,
    headerType: 1,
    externalAdReply: externalAdReply
  }, { quoted: mek });

  const messageID = sentMsg.key.id;
  let timer = 180; // 3 minutes in seconds

  // Countdown timer
  const countdown = setInterval(() => {
    timer--;
    if (timer <= 0) {
      clearInterval(countdown);
      conn.sendMessage(from, { 
        text: "‚ùå Menu expired after 3 minutes. Please use the command again." 
      }, { quoted: mek });
    }
  }, 1000);

  const responseHandler = async (msgData) => {
    const receivedMsg = msgData.messages[0];
    if (!receivedMsg.message) return;

    const receivedText = receivedMsg.message.conversation || receivedMsg.message.extendedTextMessage?.text;
    const senderID = receivedMsg.key.remoteJid;
    const isReplyToBot = receivedMsg.message.extendedTextMessage?.contextInfo?.stanzaId === messageID;

    if (isReplyToBot && senderID === from) {
      clearInterval(countdown);
      conn.ev.off("messages.upsert", responseHandler);

      await conn.sendMessage(senderID, {
        react: { text: '‚¨áÔ∏è', key: receivedMsg.key }
      });

      try {
        switch (receivedText) {
          // Auto Functions
          case "1":
            updateConfig("AUTO_STATUS_SEEN", config.AUTO_STATUS_SEEN === "true" ? "false" : "true");
            reply(`‚úÖ Auto Status Seen ${config.AUTO_STATUS_SEEN === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "2":
            updateConfig("AUTO_STATUS_REPLY", config.AUTO_STATUS_REPLY === "true" ? "false" : "true");
            reply(`‚úÖ Auto Status Reply ${config.AUTO_STATUS_REPLY === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "3":
            updateConfig("AUTO_STATUS_REACT", config.AUTO_STATUS_REACT === "true" ? "false" : "true");
            reply(`‚úÖ Auto Status React ${config.AUTO_STATUS_REACT === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "4":
            updateConfig("READ_MESSAGE", config.READ_MESSAGE === "true" ? "false" : "true");
            reply(`‚úÖ Read Messages ${config.READ_MESSAGE === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "5":
            updateConfig("AUTO_REACT", config.AUTO_REACT === "true" ? "false" : "true");
            reply(`‚úÖ Auto React ${config.AUTO_REACT === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "6":
            updateConfig("AUTO_REPLY", config.AUTO_REPLY === "true" ? "false" : "true");
            reply(`‚úÖ Auto Reply ${config.AUTO_REPLY === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "7":
            updateConfig("AUTO_TYPING", config.AUTO_TYPING === "true" ? "false" : "true");
            reply(`‚úÖ Auto Typing ${config.AUTO_TYPING === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "8":
            updateConfig("AUTO_RECORDING", config.AUTO_RECORDING === "true" ? "false" : "true");
            reply(`‚úÖ Auto Recording ${config.AUTO_RECORDING === "true" ? "Disabled" : "Enabled"}`);
            break;

          // Security
          case "9":
            updateConfig("ANTI_BAD", config.ANTI_BAD === "true" ? "false" : "true");
            reply(`‚úÖ Anti Bad Words ${config.ANTI_BAD === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "10":
            updateConfig("ANTI_LINK", config.ANTI_LINK === "true" ? "false" : "true");
            reply(`‚úÖ Anti Links ${config.ANTI_LINK === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "11":
            updateConfig("ANTI_VV", config.ANTI_VV === "true" ? "false" : "true");
            reply(`‚úÖ Anti View Once ${config.ANTI_VV === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "12":
            updateConfig("DELETE_LINKS", config.DELETE_LINKS === "true" ? "false" : "true");
            reply(`‚úÖ Delete Links ${config.DELETE_LINKS === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "13":
            reply("üìù Set Anti Delete Path (log/same):");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newPath = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                if (['log', 'same'].includes(newPath.toLowerCase())) {
                  updateConfig("ANTI_DEL_PATH", newPath.toLowerCase());
                  reply(`‚úÖ Anti Delete Path set to: ${newPath}`);
                } else {
                  reply("‚ùå Invalid path! Use 'log' or 'same'");
                }
              }
            });
            break;

          // Media
          case "14":
            updateConfig("AUTO_VOICE", config.AUTO_VOICE === "true" ? "false" : "true");
            reply(`‚úÖ Auto Voice ${config.AUTO_VOICE === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "15":
            updateConfig("AUTO_STICKER", config.AUTO_STICKER === "true" ? "false" : "true");
            reply(`‚úÖ Auto Sticker ${config.AUTO_STICKER === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "16":
            updateConfig("READ_CMD", config.READ_CMD === "true" ? "false" : "true");
            reply(`‚úÖ Read Commands ${config.READ_CMD === "true" ? "Disabled" : "Enabled"}`);
            break;

          // Other Settings
          case "18":
            updateConfig("CUSTOM_REACT", config.CUSTOM_REACT === "true" ? "false" : "true");
            reply(`‚úÖ Custom React ${config.CUSTOM_REACT === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "19":
            updateConfig("MENTION_REPLY", config.MENTION_REPLY === "true" ? "false" : "true");
            reply(`‚úÖ Mention Reply ${config.MENTION_REPLY === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "20":
            updateConfig("ALWAYS_ONLINE", config.ALWAYS_ONLINE === "true" ? "false" : "true");
            reply(`‚úÖ Always Online ${config.ALWAYS_ONLINE === "true" ? "Disabled" : "Enabled"}`);
            break;
          case "21":
            updateConfig("PUBLIC_MODE", config.PUBLIC_MODE === "true" ? "false" : "true");
            reply(`‚úÖ Public Mode ${config.PUBLIC_MODE === "true" ? "Disabled" : "Enabled"}`);
            break;

          // Edit Values
          case "22":
            reply("üìù Send new status message:");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newMsg = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                updateConfig("AUTO_STATUS_MSG", newMsg);
                reply("‚úÖ Status message updated!");
              }
            });
            break;
          case "23":
            reply("üìù Send new alive message:");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newMsg = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                updateConfig("LIVE_MSG", newMsg);
                reply("‚úÖ Alive message updated!");
              }
            });
            break;
          case "24":
            reply("üìù Send new custom emojis (comma separated):");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newEmojis = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                updateConfig("CUSTOM_REACT_EMOJIS", newEmojis);
                reply("‚úÖ Custom emojis updated!");
              }
            });
            break;
          case "25":
            reply("üìù Send new menu image URL:");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newUrl = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                if (isUrl(newUrl)) {
                  updateConfig("MENU_IMAGE_URL", newUrl);
                  reply("‚úÖ Menu image URL updated!");
                } else {
                  reply("‚ùå Invalid URL format!");
                }
              }
            });
            break;
          case "26":
            reply("üìù Send new alive image URL:");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newUrl = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                if (isUrl(newUrl)) {
                  updateConfig("ALIVE_IMG", newUrl);
                  reply("‚úÖ Alive image URL updated!");
                } else {
                  reply("‚ùå Invalid URL format!");
                }
              }
            });
            break;
          case "27":
            reply("üìù Send new sticker pack name:");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newName = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                updateConfig("STICKER_NAME", newName);
                reply("‚úÖ Sticker pack name updated!");
              }
            });
            break;
          case "28":
            reply("üìù Set Anti Delete Path (log/same):");
            conn.ev.once("messages.upsert", async (editData) => {
              const editMsg = editData.messages[0];
              if (editMsg.key.remoteJid === from) {
                const newPath = editMsg.message.conversation || editMsg.message.extendedTextMessage?.text;
                if (['log', 'same'].includes(newPath.toLowerCase())) {
                  updateConfig("ANTI_DEL_PATH", newPath.toLowerCase());
                  reply(`‚úÖ Anti Delete Path set to: ${newPath}`);
                } else {
                  reply("‚ùå Invalid path! Use 'log' or 'same'");
                }
              }
            });
            break;

          default:
            reply("‚ùå Invalid option! Please reply with a valid number from the menu.");
        }
      } catch (error) {
        console.error("Error:", error);
        reply("‚ùå An error occurred while processing your request.");
      }
    }
  };

  conn.ev.on("messages.upsert", responseHandler);

  // Auto remove listener after 3 minutes
  setTimeout(() => {
    conn.ev.off("messages.upsert", responseHandler);
  }, 180000);
});
